# stg_fhv_tripdata.sql


{{ config(materialized='view') }}
 
with tripdata as 
(
  select *
    -- row_number() over(partition by vendorid, tpep_pickup_datetime) as rn
  from {{ source('staging','fhv_2019') }}
--   where vendorid is not null 
)
select
   -- some columns
   dispatching_base_num,
   cast(SR_Flag as numeric) as sr_flag,
   Affiliated_base_number as affiliated_base_number,
 

    -- timestamps
    cast(pickup_datetime as timestamp) as pickup_datetime,
    cast(dropOFF_datetime as timestamp) as dropoff_datetime,

    -- identifiers
    {{ dbt.safe_cast("pulocationid", api.Column.translate_type("integer")) }} as pickup_locationid,
    {{ dbt.safe_cast("dolocationid", api.Column.translate_type("integer")) }} as dropoff_locationid,


   
from tripdata
where extract(year from cast(pickup_datetime as timestamp)) = 2019

-- dbt build --select <model.sql> --vars '{'is_test_run: false}'
{% if var('is_test_run', default=true) %}

  limit 100

{% endif %}


# fact_fhv.sql
{{
    config(
        materialized='table'
    )
}}

with fhv_tripdata as (
    select *, 
        'FHV' as service_type
    from {{ ref('stg_fhv_tripdata') }}
)
,
dim_zones as (
    select * from {{ ref('dim_zones') }}
    where borough != 'Unknown'
)
select 
    fhv_tripdata.dispatching_base_num,
    fhv_tripdata.affiliated_base_number,
    fhv_tripdata.service_type,
    fhv_tripdata.pickup_locationid,
    pickup_zone.borough as pickup_borough, 
    pickup_zone.zone as pickup_zone, 
    fhv_tripdata.dropoff_locationid,
    dropoff_zone.borough as dropoff_borough, 
    dropoff_zone.zone as dropoff_zone,  
    fhv_tripdata.pickup_datetime, 
    fhv_tripdata.dropoff_datetime, 
    fhv_tripdata.sr_flag
from fhv_tripdata 
inner join dim_zones as pickup_zone
on fhv_tripdata.pickup_locationid = pickup_zone.locationid
inner join dim_zones as dropoff_zone
on fhv_tripdata.dropoff_locationid = dropoff_zone.locationid


# dbt_project.yaml


# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'taxi_rides_ny'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"
  - "models/example"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.


models:
  taxi_rides_ny:
      # Applies to all files under models/.../
      staging:
          materialized: view
      core:
          materialized: table
vars:
  payment_type_values: [1, 2, 3, 4, 5, 6]
  is_test_run: false

seeds: 
    taxi_rides_ny:
        taxi_zone_lookup:
            +column_types:
                locationid: numeric


# schema.yaml modifications

sources:
    - name: staging
      database: rational-diode-412022
      schema: trip_data_all

      tables:
        - name: green_2019
        - name: yellow_2019
        - name: fhv_2019




# data load from bucket

LOAD DATA OVERWRITE `trip_data_all.fhv_2019`
FROM FILES (
  format = 'parquet',
  uris = ['gs://iharm_week4_bucket/fhv/fhv_tripdata_2019-*.parquet']
)


LOAD DATA OVERWRITE `trip_data_all.green_2019`
FROM FILES (
  format = 'PARQUET',
  uris = ['gs://iharm_week4_bucket/green/green_tripdata_2019-*.parquet'
  ]
  
  );

LOAD DATA OVERWRITE `trip_data_all.yellow_2019`
FROM FILES (
  format = 'PARQUET',
  uris = ['gs://iharm_week4_bucket/yellow/yellow_tripdata_2019-*.parquet'
  ]
  
  );


 

 # queries for questions Q3-Q4

  SELECT count(1) FROM `rational-diode-412022.dbt_imkd.fact_fhv`;

SELECT service_type, count(1) FROM `rational-diode-412022.dbt_imkd.fact_trips` 
where date(pickup_datetime) between '2019-07-01' and '2019-07-31'
group by 1 

union all

select 'fhv', count(*) from `rational-diode-412022.dbt_imkd.fact_fhv`
where date(pickup_datetime) between '2019-07-01' and '2019-07-31';






# modified data upload file

import io
import os
import requests
import pandas as pd
from google.cloud import storage

"""
Pre-reqs: 
1. `pip install pandas pyarrow google-cloud-storage`
2. Set GOOGLE_APPLICATION_CREDENTIALS to your project/service-account key
3. Set GCP_GCS_BUCKET as your bucket or change default value of BUCKET
"""

# services = ['fhv','green','yellow']
init_url = 'https://github.com/DataTalksClub/nyc-tlc-data/releases/download/'
# switch out the bucketname
BUCKET = os.environ.get("GCP_GCS_BUCKET", "iharm_week4_bucket")
# https://github.com/DataTalksClub/nyc-tlc-data/releases/download/fhv/fhv_tripdata_2019-01.csv.gz

def upload_to_gcs(bucket, object_name, local_file):
    """
    Ref: https://cloud.google.com/storage/docs/uploading-objects#storage-upload-object-python
    """
    # # WORKAROUND to prevent timeout for files > 6 MB on 800 kbps upload speed.
    # # (Ref: https://github.com/googleapis/python-storage/issues/74)
    storage.blob._MAX_MULTIPART_SIZE = 5 * 1024 * 1024  # 5 MB
    storage.blob._DEFAULT_CHUNKSIZE = 5 * 1024 * 1024  # 5 MB

    client = storage.Client()
    bucket = client.bucket(bucket)
    blob = bucket.blob(object_name)
    blob.upload_from_filename(local_file)


def web_to_gcs(year, service):
    for i in range(12):
        
        # sets the month part of the file_name string
        month = '0'+str(i+1)
        month = month[-2:]

        # csv file_name
        file_name = f"{service}_tripdata_{year}-{month}.csv.gz"

        # download it using requests via a pandas df
        request_url = f"{init_url}{service}/{file_name}"
        r = requests.get(request_url)
        open(file_name, 'wb').write(r.content)
        print(f"Local: {file_name}")

        # read it back into a parquet file
        df = pd.read_csv(file_name, compression='gzip')

        # print(df.columns)

        if 'VendorID' in df.columns:
            df['VendorID'] = df['VendorID'].fillna(-1)
            df['VendorID'] = df['VendorID'].astype(str)

        if 'RatecodeID' in df.columns:
            df['RatecodeID'] = df['RatecodeID'].fillna(-1)
            df['RatecodeID'] = df['RatecodeID'].astype(str)

        if 'payment_type' in df.columns:
            df['payment_type'] = df['payment_type'].fillna(-1)
            df['payment_type'] = df['payment_type'].astype(int)

        if 'trip_type' in df.columns:
            df['trip_type'] = df['trip_type'].fillna(-1)
            df['trip_type'] = df['trip_type'].astype(str)

        if 'passenger_count' in df.columns:
            df['passenger_count'] = df['passenger_count'].fillna(-1)
            df['passenger_count'] = df['passenger_count'].astype(int)

        if 'DOlocationID' in df.columns:
            df['DOlocationID'] = df['DOlocationID'].fillna(-1)
            df['DOlocationID'] = df['DOlocationID'].astype(int)

        if 'PUlocationID' in df.columns:
            df['PUlocationID'] = df['PUlocationID'].fillna(-1)
            df['PUlocationID'] = df['PUlocationID'].astype(int)


        print("line 1 ok")
        file_name = file_name.replace('.csv.gz', '.parquet')
        print(f"line 2 ok {file_name}")
        df.to_parquet(file_name, engine='pyarrow')
        print(f"Parquet: {file_name}")

        # upload it to gcs 
        upload_to_gcs(BUCKET, f"{service}/{file_name}", file_name)
        print(f"GCS: {service}/{file_name}")


web_to_gcs('2019', 'green')
# web_to_gcs('2020', 'green')
# web_to_gcs('2019', 'yellow')
# web_to_gcs('2020', 'yellow')
# web_to_gcs('2019', 'fhv')
# /Users/admin/Downloads/rational-diode-412022-345770ea2fc8.json
# export GOOGLE_APPLICATION_CREDENTIALS="terrademo/keys/my-creds.json"
# python web_to_gcs.py
